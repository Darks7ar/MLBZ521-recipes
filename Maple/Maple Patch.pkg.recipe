<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Identifier</key>
    <string>com.github.mlbz521.pkg.MaplePatch</string>
    <key>Description</key>
    <string>Downloads the patch for the specified Maple major version.

Specify major version as:  '2020', '2019', '2018', '2017', or 2016</string>
    <key>Input</key>
    <dict>
        <key>NAME</key>
        <string>Maple %MAJOR_VERSION% Patch</string>
		<!-- A 7z-compatible binary is required.  If one in not in your system PATH 
		or in a standard location, you will need to specify the location here. -->
		<key>BINARY_7Z_PATH</key>
		<string>/path/to/7z</string>
    </dict>
	<key>ParentRecipe</key>
	<string>com.github.mlbz521.download.MaplePatch</string>
    <key>Process</key>
    <array>
		<dict>
			<key>Processor</key>
			<string>PkgRootCreator</string>
			<key>Arguments</key>
			<dict>
				<key>pkgdirs</key>
				<dict/>
				<key>pkgroot</key>
				<string>%RECIPE_CACHE_DIR%/pkgroot</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>PkgRootCreator</string>
			<key>Arguments</key>
			<dict>
				<key>pkgdirs</key>
				<dict/>
				<key>pkgroot</key>
				<string>%RECIPE_CACHE_DIR%/scripts</string>
			</dict>
		</dict>
        <dict>
			<key>Processor</key>
			<string>com.github.mlbz521.SharedProcessors/ExtractWith7z</string>
			<key>Arguments</key>
			<dict>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/unpack</string>
				<key>purge_destination</key>
				<string>true</string>
				<key>7z_path</key>
				<string>%BINARY_7Z_PATH%</string>
			</dict>
		</dict>
        <dict>
			<key>Processor</key>
			<string>com.github.mlbz521.SharedProcessors/ExtractWith7z</string>
			<key>Arguments</key>
			<dict>
				<key>archive_path</key>
				<string>%RECIPE_CACHE_DIR%/unpack/Maple %version%</string>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/scripts</string>
				<key>purge_destination</key>
				<string>true</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>FileCreator</string>
			<key>Arguments</key>
			<dict>
				<key>file_content</key>
				<string>#!/bin/bash

###################################################################################################
# Script Name:  update_Maple.sh
# By:  Zack Thompson / Created:  3/2/2017
# Version:  1.5.2 / Updated:  7/26/2019 / By:  ZT
#
# Description:  This script silently installs a Maple update.
#
###################################################################################################

echo "*****  Update Maple process:  START  *****"

##################################################
# Define Variables

# Set working directory
	pkgDir=$(/usr/bin/dirname "${0}")
# Version that's being updated (this will be set by the build_Maple.sh script)
	version="%version%"
	majorVersion=$(echo "${version}" | /usr/bin/awk -F "." '{print $1}')
# Get the location of Maple.app
	appPath=$(/usr/bin/find /Applications -iname "Maple ${majorVersion}.app" -maxdepth 3 -type d -prune)
# Get the current Maple version
	currentVersion=$(/usr/bin/defaults read "${appPath}/Contents/Info.plist" CFBundleShortVersionString)

##################################################
# Bits staged...

echo "Current version:  ${currentVersion}"
echo "Updating to version:  ${version}"

# Make sure the file is executable
/usr/sbin/chown -R root:wheel "${pkgDir}/Maple${version}MacUpgrade.app"
/bin/chmod -R 555 "${pkgDir}/Maple${version}MacUpgrade.app"

# Update Maple
echo "Updating Maple..."
	exitStatus=$("${pkgDir}/Maple${version}MacUpgrade.app/Contents/MacOS/installbuilder.sh" --mode unattended)
	exitCode=$?

if [[ $exitCode != 0 ]]; then
	echo "ERROR:  Update failed!"
	echo "Exit code was:  ${exitCode}"
	echo "Exit status was:  ${exitStatus}"
	echo "*****  Update Maple process:  FAILED  *****"
	exit 1
# This is no longer supported on macOS Ventura and breaks the application bundle.
# elif [[ $(/usr/bin/defaults read "${appPath}/Contents/Info.plist" CFBundleShortVersionString) != "${version}" ]]; then
# 	echo "Injecting the proper version string into Maple's Info.plist"
# 	# Inject the proper version into the Info.plist file -- this may not be required for every version; but was not done in 2016.0X updates
# 		/usr/bin/sed -i '' 's/'"${currentVersion}"'/'"${version}"'/g;' "${appPath}/Contents/Info.plist"
fi

echo "Update complete!"
echo "*****  Update Maple process:  COMPLETE  *****"

exit 0</string>
				<key>file_mode</key>
				<string>0755</string>
				<key>file_path</key>
				<string>%RECIPE_CACHE_DIR%/scripts/postinstall</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>PkgCreator</string>
			<key>Arguments</key>
			<dict>
				<key>pkg_request</key>
				<dict>
					<key>chown</key>
					<array/>
					<key>id</key>
					<string>com.maplesoft.maple</string>
					<key>pkgname</key>
					<string>%NAME%-%version%</string>
					<key>pkgroot</key>
					<string>%RECIPE_CACHE_DIR%/pkgroot</string>
					<key>pkgtype</key>
					<string>flat</string>
					<key>scripts</key>
					<string>scripts</string>
					<key>version</key>
					<string>%version%</string>
				</dict>
			</dict>
		</dict>
        <dict>
            <key>Processor</key>
            <string>PathDeleter</string>
            <key>Arguments</key>
            <dict>
                <key>path_list</key>
                <array>
                    <string>%RECIPE_CACHE_DIR%/unpack</string>
					<string>%RECIPE_CACHE_DIR%/pkgroot</string>
					<string>%RECIPE_CACHE_DIR%/scripts</string>
                </array>
            </dict>
        </dict>
    </array>
</dict>
</plist>