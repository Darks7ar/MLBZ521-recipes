Description: |
  Downloads and packages the latest version of Stata from a local file share.

  The vendor package defaults to installing nothing, so you must select the edition to installed...

  The edition is based on the license type.  This recipe allows you specify the license type to install, which can be one of:
    * BE (Base Edition)
    * SE (Standard Edition)
    * MP (Parallel-Processing Edition)

  Assign the desired edition to the input variable "EDITION".

  Note:  Version 16 and newer is Universal.
Identifier: com.github.mlbz521.pkg.Stata
ParentRecipe: com.github.mlbz521.download.Stata
MinimumVersion: "2.3"
Input:
  NAME: Stata
  EDITION: MP
Process:
  - Processor: PkgRootCreator
    Arguments:
      pkgroot: "%RECIPE_CACHE_DIR%/pkgroot"
      pkgdirs: {}
  - Processor: PkgRootCreator
    Arguments:
      pkgroot: "%RECIPE_CACHE_DIR%/Scripts"
      pkgdirs: {}
  - Processor: com.github.mlbz521.SharedProcessors/XarExtractSingleFile
    Arguments:
      archive_path: "%found_filename%/*.pkg"
      file_to_extract: Distribution
  - Processor: com.github.mlbz521.SharedProcessors/XPathParser
    Arguments:
      xml_file: "%extracted_file%"
      xpath: .//pkg-ref[@id="com.stata.pkg.stata%found_major_version%.StataBase"][@version]
      attribute_one: version
      return_variable_attribute_one: version
  - Processor: Copier
    Arguments:
      source_path: "%found_filename%/*.pkg"
      destination_path: "%RECIPE_CACHE_DIR%/Scripts/%NAME%.pkg"
  - Processor: FileCreator
    Arguments:
      file_content: |
        #!/bin/bash

        ###################################################################################################
        # Script Name:  Install-ViaChoicePlist.sh
        # By:  Zack Thompson / Created:  8/05/2023
        # Version:  1.0.0 / Updated:  8/05/2023 / By:  ZT
        #
        # Description:  This script defines a choice plist and installs a package.
        #
        ###################################################################################################

        echo "*****  Install %NAME% Process:  START  *****"

        ##################################################
        # Define Variables

        # Set working directory
        temp_pkg_dir=$( /usr/bin/dirname "${0}" )

        # Get the filename of the .pkg file
        pkg=$( /bin/ls "${temp_pkg_dir}" | /usr/bin/grep .pkg )

        # Available options discovered in the .pkg
        install_choice="%EDITION%"

        # Define location of the choices plist
        choices_plist="${temp_pkg_dir}/choices.plist"

        ##################################################
        # Define Functions

        exit_check() {
          # Handles checking the exit code of tasks.
          exit_code="${1}"
          error_text="${2}"

          if [[ "${exit_code}" != 0 ]]; then
            # Ejecting the disk image...
            /usr/bin/hdiutil eject "${mounted_image}"
            echo -e "[ERROR] ${error_text}\nExit Code:  ${exit_code}"
            echo -e "\n*****  %NAME% Process:  FAILED  *****"
            exit "${exit_code}"
          fi
        }

        PlistBuddy_helper() {
            # This is a helper function to interact with plists.
            key="${1}"
            type="${2}"
            value="${3}"
            plist="${4}"
            action="${5}"

            if [[ "${action}" = "delete"  ]]; then

                # Delete existing values
                /usr/libexec/PlistBuddy -c "Delete :${key} ${type}" "${plist}" > /dev/null 2>&1

            elif [[ "${action}" = "clear"  ]]; then

                # Clear existing values
                /usr/libexec/PlistBuddy -c "clear ${type}" "${plist}" > /dev/null 2>&1

            else

                # Configure values
                /usr/libexec/PlistBuddy -c "Add :${key} ${type} ${value}" "${plist}"  > /dev/null 2>&1 || /usr/libexec/PlistBuddy -c "Set :${key} ${value}" "${plist}" > /dev/null 2>&1

            fi
        }

        add_choices_helper() {
            # This is a helper function to add installer choices to a Plist.
            array_index="${1}"
            plist="${2}"
            choice_identifier="${3}"

            PlistBuddy_helper ":${array_index}:attributeSetting" "integer" "1" "${plist}"
            PlistBuddy_helper ":${array_index}:choiceAttribute" "string" "selected" "${plist}"
            PlistBuddy_helper ":${array_index}:choiceIdentifier" "string" "${choice_identifier}" "${plist}"
        }

        ##################################################
        # Bits staged...

        # Check the installation target.
        if [[ $3 != "/" ]]; then
          exit_check "1" "Target disk is not the startup disk."
        fi

        # Create an empty array
        PlistBuddy_helper "" "array" "" "${choices_plist}" "clear"

        # Setting starting point for the array
        array_item=0

        # Set the choice
        add_choices_helper "${array_item}" "${choices_plist}" "${install_choice}"

        # Install the .pkg with the choices plist
        /usr/sbin/installer -applyChoiceChangesXML "${choices_plist}" -pkg "${pkg}" -target "/"
        exit_check $? "Failed to apply choices to the installer."

        echo "*****  Install %NAME% Process:  COMPLETE  *****"
        exit 0
      file_mode: "0755"
      file_path: "%RECIPE_CACHE_DIR%/Scripts/postinstall"
  - Processor: PkgCreator
    Arguments:
      pkg_request:
        id: com.stata.pkg.installer
        pkgname: "%NAME%-%version%"
        pkgroot: "%RECIPE_CACHE_DIR%/pkgroot"
        pkgtype: flat
        scripts: Scripts
        version: "%version%"
  - Processor: com.github.mlbz521.SharedProcessors/RenamePath
    Arguments:
      source_path: "%RECIPE_CACHE_DIR%/%NAME%-%version%.pkg"
      new_name: "%RECIPE_CACHE_DIR%/%NAME% %EDITION% (Universal)-%version%.pkg"
  - Processor: PathDeleter
    Arguments:
      path_list: 
      - "%RECIPE_CACHE_DIR%/extractedfile"
      - "%RECIPE_CACHE_DIR%/pkgroot"
      - "%RECIPE_CACHE_DIR%/Scripts"
